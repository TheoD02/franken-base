<?php

namespace App\Entity;

use ApiPlatform\Metadata\ApiProperty;
use ApiPlatform\Metadata\ApiResource;
use ApiPlatform\Metadata\Delete;
use ApiPlatform\Metadata\Get;
use ApiPlatform\Metadata\GetCollection;
use ApiPlatform\Metadata\Patch;
use ApiPlatform\Metadata\Post;
use ApiPlatform\Metadata\Put;
use App\Enum\GovernmentBenefitsType;
use Doctrine\Common\Collections\ArrayCollection;
use Doctrine\Common\Collections\Collection;
use Doctrine\ORM\Mapping as ORM;
use Symfony\Bridge\Doctrine\Validator\Constraints\UniqueEntity;
use Symfony\Component\Validator\Constraints as Assert;

/**
 * A service provided by an organization, e.g. delivery service, print services, etc.
 *
 * @see https://schema.org/Service
 */
#[ORM\Entity]
#[ORM\InheritanceType('JOINED')]
#[ORM\DiscriminatorColumn(name: 'discr')]
#[ORM\DiscriminatorMap([
	'service' => Service::class,
	'taxi' => Taxi::class,
	'foodService' => FoodService::class,
	'webAPI' => WebAPI::class,
	'taxiService' => TaxiService::class,
	'broadcastService' => BroadcastService::class,
	'governmentService' => GovernmentService::class,
	'cableOrSatelliteService' => CableOrSatelliteService::class,
	'currencyConversionService' => CurrencyConversionService::class,
	'paymentService' => PaymentService::class,
	'loanOrCredit' => LoanOrCredit::class,
	'radioBroadcastService' => RadioBroadcastService::class,
	'investmentFund' => InvestmentFund::class,
	'brokerageAccount' => BrokerageAccount::class,
	'mortgageLoan' => MortgageLoan::class,
	'creditCard' => CreditCard::class,
	'depositAccount' => DepositAccount::class,
])]
class Service extends Intangible
{
	/**
	 * A pointer to another, somehow related product (or multiple products).
	 *
	 * @see https://schema.org/isRelatedTo
	 */
	#[ORM\OneToOne(targetEntity: 'App\Entity\Product')]
	#[ApiProperty(types: ['https://schema.org/isRelatedTo'])]
	private ?Product $isRelatedTo = null;

	/**
	 * The service provider, service operator, or service performer; the goods producer. Another party (a seller) may offer those services or goods on behalf of the provider. A provider may also serve as the seller.
	 *
	 * @see https://schema.org/provider
	 */
	#[ORM\OneToOne(targetEntity: 'App\Entity\Person')]
	#[ApiProperty(types: ['https://schema.org/provider'])]
	private ?Person $provider = null;

	/**
	 * @var Collection<Product>|null A pointer to another, functionally similar product (or multiple products).
	 * @see https://schema.org/isSimilarTo
	 */
	#[ORM\ManyToMany(targetEntity: 'App\Entity\Product')]
	#[ORM\JoinTable(name: 'service_product_is_similar_to')]
	#[ORM\InverseJoinColumn(unique: true)]
	#[ApiProperty(types: ['https://schema.org/isSimilarTo'])]
	private ?Collection $isSimilarTo = null;

	/**
	 * Certification information about a product, organization, service, place, or person.
	 *
	 * @see https://schema.org/hasCertification
	 */
	#[ORM\OneToOne(targetEntity: 'App\Entity\Certification')]
	#[ORM\JoinColumn(nullable: false)]
	#[ApiProperty(types: ['https://schema.org/hasCertification'])]
	#[Assert\NotNull]
	private Certification $hasCertification;

	/**
	 * A means of accessing the service (e.g. a phone bank, a web site, a location, etc.).
	 *
	 * @see https://schema.org/availableChannel
	 */
	#[ORM\OneToOne(targetEntity: 'App\Entity\ServiceChannel')]
	#[ORM\JoinColumn(nullable: false)]
	#[ApiProperty(types: ['https://schema.org/availableChannel'])]
	#[Assert\NotNull]
	private ServiceChannel $availableChannel;

	/**
	 * An associated logo.
	 *
	 * @see https://schema.org/logo
	 */
	#[ORM\ManyToOne(targetEntity: 'App\Entity\URL')]
	#[ApiProperty(types: ['https://schema.org/logo'])]
	#[Assert\Url]
	private ?string $logo = null;

	/**
	 * The tangible thing generated by the service, e.g. a passport, permit, etc.
	 *
	 * @see https://schema.org/serviceOutput
	 */
	#[ORM\OneToOne(targetEntity: 'App\Entity\Thing')]
	#[ApiProperty(types: ['https://schema.org/serviceOutput'])]
	private ?Thing $serviceOutput = null;

	/**
	 * Human-readable terms of service documentation.
	 *
	 * @see https://schema.org/termsOfService
	 */
	#[ORM\ManyToOne(targetEntity: 'App\Entity\Text')]
	#[ApiProperty(types: ['https://schema.org/termsOfService'])]
	private ?string $termsOfService = null;

	/**
	 * Indicates an OfferCatalog listing for this Organization, Person, or Service.
	 *
	 * @see https://schema.org/hasOfferCatalog
	 */
	#[ORM\OneToOne(targetEntity: 'App\Entity\OfferCatalog')]
	#[ORM\JoinColumn(nullable: false)]
	#[ApiProperty(types: ['https://schema.org/hasOfferCatalog'])]
	#[Assert\NotNull]
	private OfferCatalog $hasOfferCatalog;

	/**
	 * An entity that arranges for an exchange between a buyer and a seller. In most cases a broker never acquires or releases ownership of a product or service involved in an exchange. If it is not clear whether an entity is a broker, seller, or buyer, the latter two terms are preferred.
	 *
	 * @see https://schema.org/broker
	 */
	#[ORM\OneToOne(targetEntity: 'App\Entity\Person')]
	#[ORM\JoinColumn(nullable: false)]
	#[ApiProperty(types: ['https://schema.org/broker'])]
	#[Assert\NotNull]
	private Person $broker;

	/**
	 * The overall rating, based on a collection of reviews or ratings, of the item.
	 *
	 * @see https://schema.org/aggregateRating
	 */
	#[ORM\OneToOne(targetEntity: 'App\Entity\AggregateRating')]
	#[ApiProperty(types: ['https://schema.org/aggregateRating'])]
	private ?AggregateRating $aggregateRating = null;

	/**
	 * @var Collection<Text>|null A category for the item. Greater signs or slashes can be used to informally indicate a category hierarchy.
	 * @see https://schema.org/category
	 */
	#[ORM\ManyToMany(targetEntity: 'App\Entity\Text')]
	#[ORM\JoinTable(name: 'service_text_category')]
	#[ORM\InverseJoinColumn(unique: true)]
	#[ApiProperty(types: ['https://schema.org/category'])]
	private ?Collection $category = null;

	/**
	 * An award won by or for this item.
	 *
	 * @see https://schema.org/award
	 */
	#[ORM\ManyToOne(targetEntity: 'App\Entity\Text')]
	#[ApiProperty(types: ['https://schema.org/award'])]
	private ?string $award = null;

	/**
	 * A slogan or motto associated with the item.
	 *
	 * @see https://schema.org/slogan
	 */
	#[ORM\ManyToOne(targetEntity: 'App\Entity\Text')]
	#[ApiProperty(types: ['https://schema.org/slogan'])]
	private ?string $slogan = null;

	/**
	 * The geographic area where a service or offered item is provided.
	 *
	 * @see https://schema.org/areaServed
	 */
	#[ORM\OneToOne(targetEntity: 'App\Entity\Text')]
	#[ApiProperty(types: ['https://schema.org/areaServed'])]
	private ?string $areaServed = null;

	/**
	 * A review of the item.
	 *
	 * @see https://schema.org/review
	 */
	#[ORM\OneToOne(targetEntity: 'App\Entity\Review')]
	#[ORM\JoinColumn(nullable: false)]
	#[ApiProperty(types: ['https://schema.org/review'])]
	#[Assert\NotNull]
	private Review $review;

	/**
	 * Indicates the mobility of a provided service (e.g. 'static', 'dynamic').
	 *
	 * @see https://schema.org/providerMobility
	 */
	#[ORM\ManyToOne(targetEntity: 'App\Entity\Text')]
	#[ApiProperty(types: ['https://schema.org/providerMobility'])]
	private ?string $providerMobility = null;

	/**
	 * @var Collection<Organization>|null The brand(s) associated with a product or service, or the brand(s) maintained by an organization or business person.
	 * @see https://schema.org/brand
	 */
	#[ORM\ManyToMany(targetEntity: 'App\Entity\Organization')]
	#[ORM\JoinTable(name: 'service_organization_brand')]
	#[ORM\InverseJoinColumn(unique: true)]
	#[ApiProperty(types: ['https://schema.org/brand'])]
	private ?Collection $brand = null;

	/**
	 * An intended audience, i.e. a group for whom something was created.
	 *
	 * @see https://schema.org/audience
	 */
	#[ORM\OneToOne(targetEntity: 'App\Entity\Audience')]
	#[ORM\JoinColumn(nullable: false)]
	#[ApiProperty(types: ['https://schema.org/audience'])]
	#[Assert\NotNull]
	private Audience $audience;

	/**
	 * The hours during which this service or contact is available.
	 *
	 * @see https://schema.org/hoursAvailable
	 */
	#[ORM\OneToOne(targetEntity: 'App\Entity\OpeningHoursSpecification')]
	#[ApiProperty(types: ['https://schema.org/hoursAvailable'])]
	private ?OpeningHoursSpecification $hoursAvailable = null;

	/**
	 * The type of service being offered, e.g. veterans' benefits, emergency relief, etc.
	 *
	 * @see https://schema.org/serviceType
	 */
	#[ORM\Column(nullable: true)]
	#[ApiProperty(types: ['https://schema.org/serviceType'])]
	#[Assert\Choice(callback: [GovernmentBenefitsType::class, 'toArray'])]
	private ?string $serviceType = null;

	/**
	 * @var Collection<Demand>|null An offer to provide this itemâ€”for example, an offer to sell a product, rent the DVD of a movie, perform a service, or give away tickets to an event. Use \[\[businessFunction\]\] to indicate the kind of transaction offered, i.e. sell, lease, etc. This property can also be used to describe a \[\[Demand\]\]. While this property is listed as expected on a number of common types, it can be used in others. In that case, using a second type, such as Product or a subtype of Product, can clarify the nature of the offer.
	 * @see https://schema.org/offers
	 */
	#[ORM\ManyToMany(targetEntity: 'App\Entity\Demand')]
	#[ORM\JoinTable(name: 'service_demand_offers')]
	#[ORM\InverseJoinColumn(unique: true)]
	#[ApiProperty(types: ['https://schema.org/offers'])]
	private ?Collection $offers = null;

	function __construct()
	{
		$this->isSimilarTo = new ArrayCollection();
		$this->category = new ArrayCollection();
		$this->brand = new ArrayCollection();
		$this->offers = new ArrayCollection();
	}

	public function setIsRelatedTo(?Product $isRelatedTo): void
	{
		$this->isRelatedTo = $isRelatedTo;
	}

	public function getIsRelatedTo(): ?Product
	{
		return $this->isRelatedTo;
	}

	public function setProvider(?Person $provider): void
	{
		$this->provider = $provider;
	}

	public function getProvider(): ?Person
	{
		return $this->provider;
	}

	public function addIsSimilarTo(Product $isSimilarTo): void
	{
		$this->isSimilarTo[] = $isSimilarTo;
	}

	public function removeIsSimilarTo(Product $isSimilarTo): void
	{
		$this->isSimilarTo->removeElement($isSimilarTo);
	}

	/**
	 * @return Collection<Product>|null
	 */
	public function getIsSimilarTo(): Collection
	{
		return $this->isSimilarTo;
	}

	public function setHasCertification(Certification $hasCertification): void
	{
		$this->hasCertification = $hasCertification;
	}

	public function getHasCertification(): Certification
	{
		return $this->hasCertification;
	}

	public function setAvailableChannel(ServiceChannel $availableChannel): void
	{
		$this->availableChannel = $availableChannel;
	}

	public function getAvailableChannel(): ServiceChannel
	{
		return $this->availableChannel;
	}

	public function setLogo(?string $logo): void
	{
		$this->logo = $logo;
	}

	public function getLogo(): ?string
	{
		return $this->logo;
	}

	public function setServiceOutput(?Thing $serviceOutput): void
	{
		$this->serviceOutput = $serviceOutput;
	}

	public function getServiceOutput(): ?Thing
	{
		return $this->serviceOutput;
	}

	public function setTermsOfService(?string $termsOfService): void
	{
		$this->termsOfService = $termsOfService;
	}

	public function getTermsOfService(): ?string
	{
		return $this->termsOfService;
	}

	public function setHasOfferCatalog(OfferCatalog $hasOfferCatalog): void
	{
		$this->hasOfferCatalog = $hasOfferCatalog;
	}

	public function getHasOfferCatalog(): OfferCatalog
	{
		return $this->hasOfferCatalog;
	}

	public function setBroker(Person $broker): void
	{
		$this->broker = $broker;
	}

	public function getBroker(): Person
	{
		return $this->broker;
	}

	public function setAggregateRating(?AggregateRating $aggregateRating): void
	{
		$this->aggregateRating = $aggregateRating;
	}

	public function getAggregateRating(): ?AggregateRating
	{
		return $this->aggregateRating;
	}

	public function addCategory(string $category): void
	{
		$this->category[] = $category;
	}

	public function removeCategory(string $category): void
	{
		$this->category->removeElement($category);
	}

	/**
	 * @return Collection<Text>|null
	 */
	public function getCategory(): Collection
	{
		return $this->category;
	}

	public function setAward(?string $award): void
	{
		$this->award = $award;
	}

	public function getAward(): ?string
	{
		return $this->award;
	}

	public function setSlogan(?string $slogan): void
	{
		$this->slogan = $slogan;
	}

	public function getSlogan(): ?string
	{
		return $this->slogan;
	}

	public function setAreaServed(?string $areaServed): void
	{
		$this->areaServed = $areaServed;
	}

	public function getAreaServed(): ?string
	{
		return $this->areaServed;
	}

	public function setReview(Review $review): void
	{
		$this->review = $review;
	}

	public function getReview(): Review
	{
		return $this->review;
	}

	public function setProviderMobility(?string $providerMobility): void
	{
		$this->providerMobility = $providerMobility;
	}

	public function getProviderMobility(): ?string
	{
		return $this->providerMobility;
	}

	public function addBrand(Organization $brand): void
	{
		$this->brand[] = $brand;
	}

	public function removeBrand(Organization $brand): void
	{
		$this->brand->removeElement($brand);
	}

	/**
	 * @return Collection<Organization>|null
	 */
	public function getBrand(): Collection
	{
		return $this->brand;
	}

	public function setAudience(Audience $audience): void
	{
		$this->audience = $audience;
	}

	public function getAudience(): Audience
	{
		return $this->audience;
	}

	public function setHoursAvailable(?OpeningHoursSpecification $hoursAvailable): void
	{
		$this->hoursAvailable = $hoursAvailable;
	}

	public function getHoursAvailable(): ?OpeningHoursSpecification
	{
		return $this->hoursAvailable;
	}

	public function setServiceType(?string $serviceType): void
	{
		$this->serviceType = $serviceType;
	}

	public function getServiceType(): ?string
	{
		return $this->serviceType;
	}

	public function addOffer(Demand $offer): void
	{
		$this->offers[] = $offer;
	}

	public function removeOffer(Demand $offer): void
	{
		$this->offers->removeElement($offer);
	}

	/**
	 * @return Collection<Demand>|null
	 */
	public function getOffers(): Collection
	{
		return $this->offers;
	}
}
